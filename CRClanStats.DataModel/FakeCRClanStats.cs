// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.7
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace CRClanStats.DataModel
{

    using System.Linq;

    public class FakeCRClanStats : ICRClanStats
    {
        public System.Data.Entity.DbSet<ClanStat> ClanStats { get; set; }
        public System.Data.Entity.DbSet<ClanStatsWeekly> ClanStatsWeeklies { get; set; }
        public System.Data.Entity.DbSet<Player> Players { get; set; }
        public System.Data.Entity.DbSet<PlayerRole> PlayerRoles { get; set; }
        public System.Data.Entity.DbSet<PlayerStat> PlayerStats { get; set; }
        public System.Data.Entity.DbSet<PlayerStatsWeekly> PlayerStatsWeeklies { get; set; }
        public System.Data.Entity.DbSet<RefactorLog> RefactorLogs { get; set; }

        public FakeCRClanStats()
        {
            ClanStats = new FakeDbSet<ClanStat>("RecordDate");
            ClanStatsWeeklies = new FakeDbSet<ClanStatsWeekly>("RecordDate");
            Players = new FakeDbSet<Player>("PlayerId");
            PlayerRoles = new FakeDbSet<PlayerRole>("PlayerRoleId");
            PlayerStats = new FakeDbSet<PlayerStat>("RecordDate", "PlayerId");
            PlayerStatsWeeklies = new FakeDbSet<PlayerStatsWeekly>("RecordDate", "PlayerId");
            RefactorLogs = new FakeDbSet<RefactorLog>("OperationKey");
        }

        public int SaveChangesCount { get; private set; }
        public int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync()
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1);
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }

        protected virtual void Dispose(bool disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }

        private System.Data.Entity.Infrastructure.DbChangeTracker _changeTracker;
        public System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get { return _changeTracker; } }
        private System.Data.Entity.Infrastructure.DbContextConfiguration _configuration;
        public System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get { return _configuration; } }
        private System.Data.Entity.Database _database;
        public System.Data.Entity.Database Database { get { return _database; } }
        public System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity)
        {
            throw new System.NotImplementedException();
        }
        public System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors()
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet Set(System.Type entityType)
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public override string ToString()
        {
            throw new System.NotImplementedException();
        }

    }
}
// </auto-generated>
