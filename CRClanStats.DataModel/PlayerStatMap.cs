// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.7
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace CRClanStats.DataModel
{

    public class PlayerStatMap : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<PlayerStat>
    {
        public PlayerStatMap()
            : this("dbo")
        {
        }

        public PlayerStatMap(string schema)
        {
            ToTable("PlayerStats", schema);
            HasKey(x => new { x.RecordDate, x.PlayerId });

            Property(x => x.RecordDate).HasColumnName(@"RecordDate").HasColumnType("datetime2").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PlayerId).HasColumnName(@"PlayerId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Trophies).HasColumnName(@"Trophies").HasColumnType("int").IsRequired();
            Property(x => x.DonationsCount).HasColumnName(@"DonationsCount").HasColumnType("int").IsRequired();
            Property(x => x.DonationsReceivedCount).HasColumnName(@"DonationsReceivedCount").HasColumnType("int").IsRequired();
            Property(x => x.ClanChestCrownsCount).HasColumnName(@"ClanChestCrownsCount").HasColumnType("int").IsOptional();
            Property(x => x.PlayerRoleId).HasColumnName(@"PlayerRoleId").HasColumnType("int").IsRequired();

            HasRequired(a => a.Player).WithMany(b => b.PlayerStats).HasForeignKey(c => c.PlayerId).WillCascadeOnDelete(false);
            HasRequired(a => a.PlayerRole).WithMany(b => b.PlayerStats).HasForeignKey(c => c.PlayerRoleId).WillCascadeOnDelete(false);
        }
    }

}
// </auto-generated>
